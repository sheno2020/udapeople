version: 2.1

orbs:
  slack: circleci/slack@4.3.3
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  memstash-token:
    type: string
    default: b4faec55-30f0-4bf0-bbb4-a722fe314562
  aws-region:
    type: string
    default: us-west-2

commands:

  extract-commit-message:
    description: Extract commit message
    steps:
      - run:
          name: Extract commit message
          when: always
          command: |
            echo "export COMMIT_MESSAGE=\"$(git log --format=%B -n 1 $CIRCLE_SHA1)\"" >> $BASH_ENV
            source $BASH_ENV

  create-env-file:
    description: Create .env file
    steps:
      - run:
          name: Create .env file
          when: always
          command: |
            touch backend/.env
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

  create-bash-profile-file:
    description: Create .bash_profile file
    steps:
      - run:
          name: Create .bash_profile file
          when: always
          command: |
            touch /home/.bash
            echo "export ENVIRONMENT=production" > "/home/.bash"
            echo "export TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> "/home/.bash"
            echo "export TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> "/home/.bash"
            echo "export TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> "/home/.bash"
            echo "export TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> "/home/.bash"
            echo "export TYPEORM_HOST=$TYPEORM_HOST" >> "/home/.bash"
            echo "export TYPEORM_PORT=$TYPEORM_PORT" >> "/home/.bash"
            echo "export TYPEORM_USERNAME=$TYPEORM_USERNAME" >> "/home/.bash"
            echo "export TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> "/home/.bash"
            echo "export TYPEORM_DATABASE=$TYPEORM_DATABASE" >> "/home/.bash"

  host-authenticity-bypass:
    description: Avoid unknown hosts
    steps:
      - run:
          name: Host authenticity bypass
          when: always
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config


  slack-failed:
    description: Send notification to Slack if failed
    steps:
      - extract-commit-message
      - slack/notify:
          channel: devops
          event: fail
        # message: Fail  message to notify the channel about the latest build
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation infras given a workflow ID.
    parameters:
      backend-infra:
        type: string
        default: backend-infra-${CIRCLE_WORKFLOW_ID}
      frontend-infra:
        type: string
        default: frontend-infra-${CIRCLE_WORKFLOW_ID}
      s3-bucket:
        type: string
        default: sheno-people-${CIRCLE_WORKFLOW_ID}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.s3-bucket >> --recursive
            aws cloudformation delete-infra --infra-name << parameters.backend-infra >>
            aws cloudformation delete-infra --infra-name << parameters.frontend-infra >>
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if (( $SUCCESS==1 ))
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      #- slack-failed

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - backend/node_modules
            - backend/dist
      #- slack-failed

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm i
            npm install oauth-sign
            npm run test
      #- slack-failed

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm i
            npm run test
      #- slack-failed

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
      #- slack-failed

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      #- slack-failed

  deploy-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Prerequisites
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infra exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=sheno-people type=backend\
              --infra-name "backend-infra-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=`aws ec2 describe-instances --filters "Name=tag:type,Values=backend" --query "Reservations[*].Instances[*].PublicIpAddress" --output text`
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - run:
          name: Ensure front-end infra exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=sheno-people type=frontend\
              --infra-name "frontend-infra-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"

      #- slack-failed
      - destroy-environment

  configure-infra:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add jq tar gzip git curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - attach_workspace:
          at: ~/
      - host-authenticity-bypass
      - create-env-file
      - create-bash-profile-file
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml --inventory-file=inventory.txt
      - run:
          name: Configure Prometheus
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook prometheus.yml --inventory-file=inventory.txt
      #- slack-failed
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - create-env-file
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > /tmp/migration.log
            cat /tmp/migration.log
            MIGRATION=`cat /tmp/migration.log | grep -c "has been executed successfully"`
            echo "Migration status: ${MIGRATION}"
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: << pipeline.parameters.memstash-token >>" --request PUT --data "$MIGRATION" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      #- slack-failed
      - destroy-environment
      - revert-migrations


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          key: frontend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Build Frontend
          command: |
            cd frontend
            npm i
            BACKEND_IP=`curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}`
            export API_URL="http://${BACKEND_IP}:3030"
            export NODE_ENV=production
            npm run build:prod
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://sheno-people-${CIRCLE_WORKFLOW_ID}"
      #- slack-failed
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add jq tar gzip git curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "77:50:06:fa:0d:9f:b2:0e:66:6a:46:6a:5d:68:36:b1"
      - run:
          name: Deploy backend
          command: |
            cd backend
            cp package* /home/circleci/project/backend/dist
            cd /home/circleci/project/backend/dist
            tar -czvf /home/sheno-people.tar.gz ./*
            cd ~/project/.circleci/ansible
            ansible-playbook deploy-backend.yml --inventory-file=inventory.txt
      #- slack-failed
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add jq tar gzip git curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://sheno-people-${CIRCLE_WORKFLOW_ID}.s3-website-<< pipeline.parameters.aws-region >>.amazonaws.com"
            echo "Frontend URL: ${URL}"
            if (( curl -s ${URL} | grep "Welcome" ))
            then
              echo "Frontend successfully deployed"
              return 0
            else
              echo "Error in frontend smoke test"
              return 1
            fi
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=`curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/BACKEND_IP_${CIRCLE_WORKFLOW_ID}`
            echo "Backend IP: ${BACKEND_IP}"
            API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "API URL: $API_URL"
            if (( curl -s ${API_URL} | grep '"status":"ok"' ))
            then
              echo "Backend successfully deployed"
              return 0
            else
              echo "Error in backend smoke test"
              return 1
            fi
      #- slack-failed
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-infra \
              --infra-name sheno-people-cloudfront \
              --use-previous-template \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID}
      #- slack-failed
      - revert-migrations
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Get old infra workflow id and remove old infras and files
          command: |
            OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            infraS=$(aws cloudformation list-infras --query "infraSummaries[*].infraName" \
                --infra-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo "Old Workflow ID: ${OldWorkflowID}"
            echo "infras: ${infraS}"
      
            if [[ "${infraS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://sheno-people-${OldWorkflowID} --recursive
              aws cloudformation delete-infra --infra-name backend-infra-${OldWorkflowID}
              aws cloudformation delete-infra --infra-name frontend-infra-${OldWorkflowID}
            fi
      #- slack-failed
      - revert-migrations
      - destroy-environment

workflows:
  default:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - deploy-infra:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend, build-backend, build-frontend]
           filters:
             branches:
               only: [master]
       - configure-infra:
           requires: [deploy-infra]
       - run-migrations:
           requires: [configure-infra]
       - deploy-frontend:
           requires: [run-migrations]
       - deploy-backend:
           requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]
